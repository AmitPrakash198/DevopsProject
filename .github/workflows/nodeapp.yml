name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Node.js environment
      uses: actions/setup-node@v3.1.1
      with:
        node-version: '14'
        cache: 'npm'
    - run: npm install
    - run: npm test


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: new_nodeapp_repo
        IMAGE_TAG: new_nodeapp_repo            # -${{ github.sha }}
      run: 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 

        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG             
        
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        # echo $(steps)
    
    - name: Download task-definition
      run: aws ecs describe-task-definition --task-definition NodeAppTaskDefinition --query taskDefinition > aws-task-definition.json

    - name: Render Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws-task-definition.json
        container-name: NodeAppContainer
        image: ${{ steps.build-image.outputs.image }} 
        LOG_LEVEL: info

    - name: Deploy to Amazon ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }} 
        service: NodeAppService
        cluster: NodeAppCluster
