name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master



# permissions:
#   contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Node.js environment
      uses: actions/setup-node@v3.1.1
      with:
        node-version: '14'
        cache: 'npm'
    - run: npm install
    - run: npm test


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: new_nodeapp_repo
        IMAGE_TAG: ${{ github.sha }}
      run: 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 

        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo $(steps)

    - name: Render Amazon ECS task definition
      id: render-web-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws-task-definition.json
        container-name: NodeAppContainer
        image: ${{ steps.outputs-image.outputs.image }}     # amazon/amazon-ecs-sample:latest
        # environment-variables: "LOG_LEVEL=info"

    - name: Deploy to Amazon ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-web-container.outputs.task-definition }}
        # service: NodeAppService
        cluster: NodeAppCluster
